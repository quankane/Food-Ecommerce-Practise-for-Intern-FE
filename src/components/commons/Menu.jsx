import React, { useRef, useState, useEffect } from "react"; // üëà S·ª≠a l·ªói: TH√äM useState v√† useEffect
import { useNavigate, useLocation } from "react-router-dom";
import {
    FaAngleDown,
    FaAngleUp,
    FaAngleLeft,
    FaAngleRight,
} from "react-icons/fa";
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y l√† ch√≠nh x√°c
import { menuListProduct, menuProjects } from "@/utils/constants/Menu";

const Menu = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const SCROLL_DISTANCE = 350;

    // 1. T·∫†O REF V√Ä TR·∫†NG TH√ÅI N√öT
    const menuRef = useRef(null);
    // üëà ƒê√£ s·ª≠a l·ªói thi·∫øu khai b√°o 'useState'
    const [isAtStart, setIsAtStart] = useState(true); // M·∫∑c ƒë·ªãnh ·ªü ƒë·∫ßu
    const [isAtEnd, setIsAtEnd] = useState(false); // M·∫∑c ƒë·ªãnh kh√¥ng ·ªü cu·ªëi

    // --- H√ÄM KI·ªÇM TRA V√Ä C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI CU·ªòN ---
    const checkScrollPosition = () => {
        if (!menuRef.current) return;

        const { scrollLeft, clientWidth, scrollWidth } = menuRef.current;
        // V·ªã tr√≠ cu·ªôn t·ªëi ƒëa (t·ªïng n·ªôi dung - v√πng hi·ªÉn th·ªã)
        const maxScroll = scrollWidth - clientWidth;

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Tr√°i ( <= 1 ƒë·ªÉ tr√°nh l·ªói l√†m tr√≤n)
        setIsAtStart(scrollLeft <= 1);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t Ph·∫£i ( >= maxScroll - 1 ƒë·ªÉ tr√°nh l·ªói l√†m tr√≤n)
        setIsAtEnd(scrollLeft >= maxScroll - 1);
    };

    // --- 2. LOGIC CU·ªòN SANG PH·∫¢I (Kh√¥ng cu·ªôn v√≤ng) ---
    const scrollRight = () => {
        if (!menuRef.current || isAtEnd) return;

        const { scrollLeft, clientWidth, scrollWidth } = menuRef.current;
        const maxScroll = scrollWidth - clientWidth;

        const newScrollPosition = scrollLeft + SCROLL_DISTANCE;

        // ƒê·∫£m b·∫£o kh√¥ng cu·ªôn qu√° maxScroll
        if (newScrollPosition >= maxScroll) {
            menuRef.current.scrollLeft = maxScroll; // Cu·ªôn ƒë·∫øn ƒë√∫ng v·ªã tr√≠ cu·ªëi
        } else {
            menuRef.current.scrollLeft = newScrollPosition;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi cu·ªôn
        setTimeout(checkScrollPosition, 50);
    };

    // --- 3. LOGIC CU·ªòN SANG TR√ÅI (Kh√¥ng cu·ªôn v√≤ng) ---
    const scrollLeft = () => {
        if (!menuRef.current || isAtStart) return;

        const currentScroll = menuRef.current.scrollLeft;

        const newScrollPosition = currentScroll - SCROLL_DISTANCE;

        // ƒê·∫£m b·∫£o kh√¥ng cu·ªôn qu√° 0
        if (newScrollPosition <= 0) {
            menuRef.current.scrollLeft = 0; // Cu·ªôn v·ªÅ ƒë·∫ßu
        } else {
            menuRef.current.scrollLeft = newScrollPosition;
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i sau khi cu·ªôn
        setTimeout(checkScrollPosition, 50);
    };

    // --- 4. USE EFFECT ƒê·ªÇ L·∫ÆNG NGHE S·ª∞ KI·ªÜN CU·ªòN ---
    // üëà ƒê√£ s·ª≠a l·ªói thi·∫øu khai b√°o 'useEffect'
    useEffect(() => {
        const ref = menuRef.current;
        if (ref) {
            checkScrollPosition();

            ref.addEventListener("scroll", checkScrollPosition);

            return () => ref.removeEventListener("scroll", checkScrollPosition);
        }
        // Th√™m [menuRef] v√†o dependency array n·∫øu b·∫°n mu·ªën re-run khi ref thay ƒë·ªïi,
        // nh∆∞ng th∆∞·ªùng l√† kh√¥ng c·∫ßn thi·∫øt cho component n√†y.
    }, []);

    return (
        <div className="hidden lg:flex items-center w-[750px]">
            {/* CONTAINER D√ÄNH CHO V√ôNG HI·ªÇN TH·ªä MENU */}
            <div className="flex-grow overflow-x-hidden">
                <ul
                    ref={menuRef} // üëà G·∫ÆN REF V√ÄO UL
                    className="flex flex-nowrap gap-8 items-center list-none px-[20px] scroll-smooth"
                    style={{
                        scrollbarWidth: "none", // ·∫®n scrollbar cho Firefox
                        msOverflowStyle: "none", // ·∫®n scrollbar cho IE/Edge
                        overflowX: "scroll", // K√≠ch ho·∫°t t√≠nh nƒÉng cu·ªôn
                    }}
                >
                    {/* 1. ƒê·∫∑t h√†ng nhanh */}
                    <li
                        className={`${
                            location.pathname === "/quick-order"
                                ? "text-[#fc791a]"
                                : ""
                        } hover:text-[#fc791a] font-medium cursor-pointer flex-shrink-0`}
                    >
                        <span onClick={() => navigate("/")} className="">
                            ƒê·∫∑t h√†ng nhanh
                        </span>
                    </li>

                    {/* 2. Menu (Dropdown) */}
                    <li
                        className={`relative flex-shrink-0 ${
                            location.pathname === "/products"
                                ? "text-[#fc791a]"
                                : "font-medium "
                        } cursor-pointer flex items-center gap-1 group transition-all`}
                    >
                        {/* ... (Menu content) ... */}
                        <span className="flex items-center gap-1 group-hover:text-[#fc791a]">
                            Menu
                            <FaAngleDown className="block text-[15px] group-hover:hidden" />
                            <FaAngleUp className="hidden text-[15px] group-hover:block" />
                        </span>
                        {/* ... (Dropdown Content) ... */}
                    </li>

                    {/* 3. Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer group flex-shrink-0">
                        <span
                            className={`${
                                location.pathname === "/promotions"
                                    ? "text-[#fc791a]"
                                    : ""
                            } flex items-center gap-1 group-hover:text-[#fc791a]`}
                        >
                            Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i
                            <FaAngleDown className="block group-hover:hidden" />
                            <FaAngleUp className="hidden group-hover:block" />
                        </span>
                    </li>

                    {/* 4. ƒê·∫∑t b√†n */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer flex-shrink-0">
                        ƒê·∫∑t b√†n
                    </li>

                    {/* 5. Tin t·ª©c */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer flex-shrink-0">
                        Tin t·ª©c
                    </li>

                    {/* 6. Gi·ªõi thi·ªáu/Gi·ªõi */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer group flex-shrink-0">
                        <span
                            className={` ${
                                location.pathname === "introductions"
                                    ? "text-[#fc79a]"
                                    : ""
                            } flex items-center gap-1 group-hover:text-[#fc791a]`}
                        >
                            Gi·ªõi thi·ªáu
                            <FaAngleDown className="block group-hover:hidden" />
                            <FaAngleUp className="hidden group-hover:block" />
                        </span>
                    </li>

                    {/* 7. Li√™n h·ªá */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer group flex-shrink-0">
                        <span
                            className={` ${
                                location.pathname === "contacts"
                                    ? "text-[#fc79a]"
                                    : ""
                            } flex items-center gap-1 group-hover:text-[#fc791a]`}
                        >
                            Li√™n h·ªá
                            <FaAngleDown className="block group-hover:hidden" />
                            <FaAngleUp className="hidden group-hover:block" />
                        </span>
                    </li>

                    {/* 8. H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p */}
                    <li className="font-medium hover:text-[#fc791a] cursor-pointer group flex-shrink-0">
                        <span
                            className={` ${
                                location.pathname === "instructions"
                                    ? "text-[#fc79a]"
                                    : ""
                            } flex items-center gap-1 group-hover:text-[#fc791a]`}
                        >
                            H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p
                            <FaAngleDown className="block group-hover:hidden" />
                            <FaAngleUp className="hidden group-hover:block" />
                        </span>
                    </li>
                </ul>
            </div>

            {/* PH·∫¶N ƒê·ªäNH NGHƒ®A SWIPER CONTROLS */}
            <div className="flex items-center text-gray-400 gap-1 ml-4 flex-shrink-0">
                <FaAngleLeft
                    // üëà √ÅP D·ª§NG TR·∫†NG TH√ÅI isAtStart
                    size={20}
                    className={`transition-colors ${
                        isAtStart
                            ? "text-gray-300 cursor-not-allowed"
                            : "hover:text-[#fc791a] cursor-pointer"
                    }`}
                    onClick={scrollLeft}
                />
                <FaAngleRight
                    // üëà √ÅP D·ª§NG TR·∫†NG TH√ÅI isAtEnd
                    size={20}
                    className={`transition-colors ${
                        isAtEnd
                            ? "text-gray-300 cursor-not-allowed"
                            : "hover:text-[#fc791a] cursor-pointer"
                    }`}
                    onClick={scrollRight}
                />
            </div>
        </div>
    );
};

export default Menu;
